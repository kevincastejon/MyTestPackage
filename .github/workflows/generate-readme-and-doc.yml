name: Generate README and Deploy Doxygen Documentation

on:
  push:
    branches:
      - main  # Déclenche l'action lorsqu'un push est effectué sur la branche "main"
  workflow_dispatch:  # Permet de déclencher manuellement le workflow

permissions:
  contents: write  # Accorder les permissions d'écriture sur les contenus du dépôt

jobs:
  generate-readme-and-doc:
    runs-on: ubuntu-latest

    steps:
      # Vérifier le dépôt
      - name: Checkout repository
        uses: actions/checkout@v3

      # Générer le README.MD en utilisant les informations du package.json
      - name: Generate README.MD
        run: |
          # Extraire les informations nécessaires du package.json
          NAME=$(grep '"name"' package.json | head -1 | cut -d '"' -f 4)
          DISPLAYNAME=$(grep '"displayName"' package.json | head -1 | cut -d '"' -f 4)
          VERSION=$(grep '"version"' package.json | head -1 | cut -d '"' -f 4)
          DESCRIPTION=$(grep '"description"' package.json | head -1 | cut -d '"' -f 4)

          # Extraire les informations de l'auteur
          AUTHOR_NAME=$(grep -A 2 '"author"' package.json | grep '"name"' | cut -d '"' -f 4)
          AUTHOR_EMAIL=$(grep -A 2 '"author"' package.json | grep '"email"' | cut -d '"' -f 4)
          AUTHOR_URL=$(grep -A 2 '"author"' package.json | grep '"url"' | cut -d '"' -f 4)

          # Vérifier si les informations de l'auteur sont vides
          if [ -z "$AUTHOR_NAME" ] || [ -z "$AUTHOR_EMAIL" ] || [ -z "$AUTHOR_URL" ]; then
            echo "Author information is missing or incorrectly formatted in package.json"
            exit 1
          fi

          # Créer le contenu du README.MD
          echo "## $DISPLAYNAME" > README.MD
          echo "" >> README.MD
          echo "# $NAME : $VERSION" >> README.MD
          echo "" >> README.MD
          echo "$DESCRIPTION" >> README.MD
          echo "" >> README.MD
          echo "## Author" >> README.MD
          echo "" >> README.MD
          echo "**Name:** $AUTHOR_NAME" >> README.MD
          echo "**Email:** [$AUTHOR_EMAIL](mailto:$AUTHOR_EMAIL)" >> README.MD
          echo "**Website:** [$AUTHOR_URL]($AUTHOR_URL)" >> README.MD
          echo "" >> README.MD

      # Vérifier si le fichier README.MD a changé
      - name: Check for README changes
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            git config --global user.name "github-actions[bot]"
            git config --global user.email "github-actions[bot]@users.noreply.github.com"
            git add README.MD
            git commit -m "Update README.MD"
            git push
          else
            echo "No changes to commit"
          fi

      # Installer Doxygen
      - name: Install Doxygen
        run: sudo apt-get update && sudo apt-get install -y doxygen

      # Générer la documentation avec Doxygen
      - name: Generate Doxygen documentation
        run: doxygen DoxygenConfig

      # Configurer Git pour le déploiement
      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      # Déployer la documentation sur la branche gh-pages
      - name: Deploy to GitHub Pages
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Utiliser le GITHUB_TOKEN pour l'authentification

        run: |
          # Créer un répertoire temporaire pour le déploiement
          mkdir -p ../gh-pages
          cp -r ./Documentation/* ../gh-pages/

          # Passer dans le répertoire gh-pages
          cd ../gh-pages

          # Initialiser un dépôt Git et ajouter les fichiers
          git init
          git add .
          git commit -m "Deploy Doxygen documentation"

          # Forcer le push vers la branche gh-pages
          git branch -M gh-pages
          git remote add origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git
          git push -f origin gh-pages
